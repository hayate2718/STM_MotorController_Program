
STM_MotorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003048  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003208  08003208  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003208  08003208  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003208  08003208  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c811  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be5  00000000  00000000  0002c84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000748  00000000  00000000  0002ec18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd02  00000000  00000000  0002f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a265  00000000  00000000  0004b062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099e7c  00000000  00000000  000552c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ef143  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f2c  00000000  00000000  000ef198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031b8 	.word	0x080031b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080031b8 	.word	0x080031b8

080001c8 <_ZN8USER_CANC1EP19__CAN_HandleTypeDef>:

#include <MotorController.hpp>
#include <CAN.hpp>


USER_CAN::USER_CAN(CAN_HandleTypeDef * _use_hcan){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]

	this->_use_hcan = _use_hcan;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	641a      	str	r2, [r3, #64]	; 0x40

	filter.FilterActivation = 1; //filter enable
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2201      	movs	r2, #1
 80001dc:	621a      	str	r2, [r3, #32]
	filter.FilterBank = 0; //used filterbank 0
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	615a      	str	r2, [r3, #20]
 	filter.FilterFIFOAssignment = 0; //rxdata to fifo0
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2200      	movs	r2, #0
 80001e8:	611a      	str	r2, [r3, #16]
	filter.FilterMode = 0; //filter mode is mask mode
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2200      	movs	r2, #0
 80001ee:	619a      	str	r2, [r3, #24]
	filter.FilterScale = 0; //filterscale is dual 16bits
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2200      	movs	r2, #0
 80001f4:	61da      	str	r2, [r3, #28]
	filter.FilterIdHigh = 0;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
	filter.FilterMaskIdHigh = 0xf << 5;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000202:	609a      	str	r2, [r3, #8]
	HAL_CAN_ConfigFilter(this->_use_hcan, &filter);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	4611      	mov	r1, r2
 800020c:	4618      	mov	r0, r3
 800020e:	f000 fc3c 	bl	8000a8a <HAL_CAN_ConfigFilter>

	TxHeader.DLC = 4; //データ長（4byte）
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2204      	movs	r2, #4
 8000216:	639a      	str	r2, [r3, #56]	; 0x38
	TxHeader.IDE = 0; //標準識別子
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	631a      	str	r2, [r3, #48]	; 0x30
	TxHeader.RTR = 0; //データフレーム
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2200      	movs	r2, #0
 8000222:	635a      	str	r2, [r3, #52]	; 0x34
	TxHeader.TransmitGlobalTime = DISABLE; //タイムスタンプ無効
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2200      	movs	r2, #0
 8000228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	can_id = 0b0000;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2200      	movs	r2, #0
 8000230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	HAL_CAN_Start(this->_use_hcan);
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fcf0 	bl	8000c1e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(this->_use_hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000242:	2102      	movs	r1, #2
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fe40 	bl	8000eca <HAL_CAN_ActivateNotification>


}
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <_ZN8USER_CAN10set_id_CANEh>:
	TxHeader.StdId = cmd+can_id;

	HAL_CAN_AddTxMessage(_use_hcan,&TxHeader, tx.low_data_raw,&mailbox);
}

void USER_CAN::set_id_CAN(uint8_t can_id){ //4bits
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	460b      	mov	r3, r1
 800025e:	70fb      	strb	r3, [r7, #3]
	this->can_id = can_id;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	78fa      	ldrb	r2, [r7, #3]
 8000264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr

08000274 <_ZN8USER_CAN10filter_setEv>:


void USER_CAN::filter_set(){
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	filter.FilterIdHigh = can_id << 5;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000282:	015b      	lsls	r3, r3, #5
 8000284:	461a      	mov	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]
	HAL_CAN_ConfigFilter(this->_use_hcan, &filter);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	4611      	mov	r1, r2
 8000292:	4618      	mov	r0, r3
 8000294:	f000 fbf9 	bl	8000a8a <HAL_CAN_ConfigFilter>

}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef>:

void USER_CAN::use_rx_CAN(CAN_HandleTypeDef *_hcan){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08c      	sub	sp, #48	; 0x30
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	if(_hcan != _use_hcan){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ae:	683a      	ldr	r2, [r7, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d127      	bne.n	8000304 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x64>
	}

	CAN_RxHeaderTypeDef RxHeader;
	can_data buf;

	if(HAL_CAN_GetRxMessage(_use_hcan, CAN_RX_FIFO0, &RxHeader, buf.all_data) == HAL_OK){
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80002b8:	f107 0308 	add.w	r3, r7, #8
 80002bc:	f107 0214 	add.w	r2, r7, #20
 80002c0:	2100      	movs	r1, #0
 80002c2:	f000 fcf0 	bl	8000ca6 <HAL_CAN_GetRxMessage>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	bf0c      	ite	eq
 80002cc:	2301      	moveq	r3, #1
 80002ce:	2300      	movne	r3, #0
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d017      	beq.n	8000306 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x66>
		if(can_id == (RxHeader.StdId & 0x00f)){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80002dc:	461a      	mov	r2, r3
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	f003 030f 	and.w	r3, r3, #15
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d10e      	bne.n	8000306 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x66>
		rx.all_data_raw = buf.all_data_raw;
 80002e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80002ec:	6879      	ldr	r1, [r7, #4]
 80002ee:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		read_f = RxHeader.StdId & 0xff0;
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	f023 030f 	bic.w	r3, r3, #15
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000302:	e000      	b.n	8000306 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x66>
		return ;
 8000304:	bf00      	nop
		}

	}
}
 8000306:	3730      	adds	r7, #48	; 0x30
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <_ZN15MotorControllerC1EP19__CAN_HandleTypeDefh>:

#include "main.h"
#include "CAN.hpp"
#include "MotorController.hpp"

MotorController::MotorController(CAN_HandleTypeDef *_hcan, uint8_t id):
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	4613      	mov	r3, r2
 8000318:	71fb      	strb	r3, [r7, #7]
use_can(_hcan)
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	3310      	adds	r3, #16
 800031e:	68b9      	ldr	r1, [r7, #8]
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff51 	bl	80001c8 <_ZN8USER_CANC1EP19__CAN_HandleTypeDef>
{
	use_can.set_id_CAN(id);
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3310      	adds	r3, #16
 800032a:	79fa      	ldrb	r2, [r7, #7]
 800032c:	4611      	mov	r1, r2
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff90 	bl	8000254 <_ZN8USER_CAN10set_id_CANEh>
	use_can.filter_set();
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	3310      	adds	r3, #16
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff9b 	bl	8000274 <_ZN8USER_CAN10filter_setEv>

	HAL_CAN_Start(_hcan);
 800033e:	68b8      	ldr	r0, [r7, #8]
 8000340:	f000 fc6d 	bl	8000c1e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(_hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000344:	2102      	movs	r1, #2
 8000346:	68b8      	ldr	r0, [r7, #8]
 8000348:	f000 fdbf 	bl	8000eca <HAL_CAN_ActivateNotification>
}
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <HAL_CAN_RxFifo0MsgPendingCallback>:
	use_data.all_data_raw = use_can.use_read_CAN(cmd);
	return use_data.low_data;
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){ //受信割り込みコールバック
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	//STM_MotorSystem *ms = STM_MotorSystem::_ms;
	//ms->use_can.use_rx_CAN(hcan);
	_use_mc->use_can.use_rx_CAN(hcan);
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3310      	adds	r3, #16
 8000366:	6879      	ldr	r1, [r7, #4]
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ff99 	bl	80002a0 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef>
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	200000d4 	.word	0x200000d4

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b0a2      	sub	sp, #136	; 0x88
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000382:	f000 fa21 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000386:	f000 f815 	bl	80003b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038a:	f000 f8cf 	bl	800052c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800038e:	f000 f899 	bl	80004c4 <_ZL19MX_USART2_UART_Initv>
  MX_CAN_Init();
 8000392:	f000 f85b 	bl	800044c <_ZL11MX_CAN_Initv>
  /* USER CODE BEGIN 2 */
  MotorController use_mc(&hcan,15);
 8000396:	463b      	mov	r3, r7
 8000398:	220f      	movs	r2, #15
 800039a:	4904      	ldr	r1, [pc, #16]	; (80003ac <main+0x30>)
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ffb5 	bl	800030c <_ZN15MotorControllerC1EP19__CAN_HandleTypeDefh>
     _use_mc = &use_mc;
 80003a2:	4a03      	ldr	r2, [pc, #12]	; (80003b0 <main+0x34>)
 80003a4:	463b      	mov	r3, r7
 80003a6:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <main+0x2c>
 80003aa:	bf00      	nop
 80003ac:	20000028 	.word	0x20000028
 80003b0:	200000d4 	.word	0x200000d4

080003b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b090      	sub	sp, #64	; 0x40
 80003b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ba:	f107 0318 	add.w	r3, r7, #24
 80003be:	2228      	movs	r2, #40	; 0x28
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fef0 	bl	80031a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d6:	2302      	movs	r3, #2
 80003d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003da:	2301      	movs	r3, #1
 80003dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003de:	2310      	movs	r3, #16
 80003e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e2:	2302      	movs	r3, #2
 80003e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003e6:	2300      	movs	r3, #0
 80003e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003ea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fa41 	bl	800187c <HAL_RCC_OscConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	bf14      	ite	ne
 8000400:	2301      	movne	r3, #1
 8000402:	2300      	moveq	r3, #0
 8000404:	b2db      	uxtb	r3, r3
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800040a:	f000 f8b3 	bl	8000574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040e:	230f      	movs	r3, #15
 8000410:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000412:	2302      	movs	r3, #2
 8000414:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800041e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2102      	movs	r1, #2
 8000428:	4618      	mov	r0, r3
 800042a:	f002 f92f 	bl	800268c <HAL_RCC_ClockConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	bf14      	ite	ne
 8000434:	2301      	movne	r3, #1
 8000436:	2300      	moveq	r3, #0
 8000438:	b2db      	uxtb	r3, r3
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800043e:	f000 f899 	bl	8000574 <Error_Handler>
  }
}
 8000442:	bf00      	nop
 8000444:	3740      	adds	r7, #64	; 0x40
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000450:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 8000452:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <_ZL11MX_CAN_Initv+0x74>)
 8000454:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000456:	4b19      	ldr	r3, [pc, #100]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 8000458:	2204      	movs	r2, #4
 800045a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800045c:	4b17      	ldr	r3, [pc, #92]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 8000464:	2200      	movs	r2, #0
 8000466:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 800046a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800046e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 8000472:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000476:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000478:	4b10      	ldr	r3, [pc, #64]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 800047a:	2200      	movs	r2, #0
 800047c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 8000480:	2201      	movs	r2, #1
 8000482:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 8000486:	2201      	movs	r2, #1
 8000488:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 800048c:	2201      	movs	r2, #1
 800048e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 8000492:	2200      	movs	r2, #0
 8000494:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 8000498:	2200      	movs	r2, #0
 800049a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800049c:	4807      	ldr	r0, [pc, #28]	; (80004bc <_ZL11MX_CAN_Initv+0x70>)
 800049e:	f000 f9f9 	bl	8000894 <HAL_CAN_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	bf14      	ite	ne
 80004a8:	2301      	movne	r3, #1
 80004aa:	2300      	moveq	r3, #0
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 80004b2:	f000 f85f 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000028 	.word	0x20000028
 80004c0:	40006400 	.word	0x40006400

080004c4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c8:	4b16      	ldr	r3, [pc, #88]	; (8000524 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004ca:	4a17      	ldr	r2, [pc, #92]	; (8000528 <_ZL19MX_USART2_UART_Initv+0x64>)
 80004cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004ea:	220c      	movs	r2, #12
 80004ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <_ZL19MX_USART2_UART_Initv+0x60>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000502:	2200      	movs	r2, #0
 8000504:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000508:	f002 faf6 	bl	8002af8 <HAL_UART_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	bf14      	ite	ne
 8000512:	2301      	movne	r3, #1
 8000514:	2300      	moveq	r3, #0
 8000516:	b2db      	uxtb	r3, r3
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 800051c:	f000 f82a 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000050 	.word	0x20000050
 8000528:	40004400 	.word	0x40004400

0800052c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <_ZL12MX_GPIO_Initv+0x44>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <_ZL12MX_GPIO_Initv+0x44>)
 8000538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <_ZL12MX_GPIO_Initv+0x44>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <_ZL12MX_GPIO_Initv+0x44>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <_ZL12MX_GPIO_Initv+0x44>)
 8000550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <_ZL12MX_GPIO_Initv+0x44>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x8>
	...

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_MspInit+0x44>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_MspInit+0x44>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <HAL_MspInit+0x44>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_MspInit+0x44>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <HAL_CAN_MspInit+0x90>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d131      	bne.n	800064e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <HAL_CAN_MspInit+0x94>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a1b      	ldr	r2, [pc, #108]	; (800065c <HAL_CAN_MspInit+0x94>)
 80005f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <HAL_CAN_MspInit+0x94>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <HAL_CAN_MspInit+0x94>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a15      	ldr	r2, [pc, #84]	; (800065c <HAL_CAN_MspInit+0x94>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <HAL_CAN_MspInit+0x94>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800061a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800062c:	2309      	movs	r3, #9
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f000 ffad 	bl	8001598 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	2014      	movs	r0, #20
 8000644:	f000 ff71 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000648:	2014      	movs	r0, #20
 800064a:	f000 ff8a 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	; 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40006400 	.word	0x40006400
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <HAL_UART_MspInit+0x80>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d129      	bne.n	80006d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <HAL_UART_MspInit+0x84>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <HAL_UART_MspInit+0x84>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_UART_MspInit+0x84>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_UART_MspInit+0x84>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <HAL_UART_MspInit+0x84>)
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_UART_MspInit+0x84>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80006b2:	f248 0304 	movw	r3, #32772	; 0x8004
 80006b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c0:	2303      	movs	r3, #3
 80006c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006c4:	2307      	movs	r3, #7
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d2:	f000 ff61 	bl	8001598 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40004400 	.word	0x40004400
 80006e4:	40021000 	.word	0x40021000

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <NMI_Handler+0x4>

080006ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler+0x4>

080006fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler+0x4>

08000706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000734:	f000 f88e 	bl	8000854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <CAN_RX0_IRQHandler+0x10>)
 8000742:	f000 fbe8 	bl	8000f16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000028 	.word	0x20000028

08000750 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <SystemInit+0x20>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <SystemInit+0x20>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077a:	490e      	ldr	r1, [pc, #56]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800077c:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000790:	4c0b      	ldr	r4, [pc, #44]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800079e:	f7ff ffd7 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a2:	f002 fcdd 	bl	8003160 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a6:	f7ff fde9 	bl	800037c <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b8:	08003210 	.word	0x08003210
  ldr r2, =_sbss
 80007bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c0:	200000dc 	.word	0x200000dc

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>
	...

080007c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_Init+0x28>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_Init+0x28>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 fe9b 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 f808 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e4:	f7ff fecc 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40022000 	.word	0x40022000

080007f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_InitTick+0x54>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x58>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	fbb3 f3f1 	udiv	r3, r3, r1
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 feb3 	bl	800157e <HAL_SYSTICK_Config>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e00e      	b.n	8000840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d80a      	bhi.n	800083e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f000 fe7b 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_InitTick+0x5c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000000 	.word	0x20000000
 800084c:	20000008 	.word	0x20000008
 8000850:	20000004 	.word	0x20000004

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_IncTick+0x20>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x24>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <HAL_IncTick+0x24>)
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008
 8000878:	200000d8 	.word	0x200000d8

0800087c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <HAL_GetTick+0x14>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	200000d8 	.word	0x200000d8

08000894 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d101      	bne.n	80008a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e0ed      	b.n	8000a82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff fe88 	bl	80005c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f042 0201 	orr.w	r2, r2, #1
 80008c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008c8:	f7ff ffd8 	bl	800087c <HAL_GetTick>
 80008cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008ce:	e012      	b.n	80008f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008d0:	f7ff ffd4 	bl	800087c <HAL_GetTick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	2b0a      	cmp	r3, #10
 80008dc:	d90b      	bls.n	80008f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2205      	movs	r2, #5
 80008ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e0c5      	b.n	8000a82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0e5      	beq.n	80008d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f022 0202 	bic.w	r2, r2, #2
 8000912:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000914:	f7ff ffb2 	bl	800087c <HAL_GetTick>
 8000918:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800091a:	e012      	b.n	8000942 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800091c:	f7ff ffae 	bl	800087c <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	2b0a      	cmp	r3, #10
 8000928:	d90b      	bls.n	8000942 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2205      	movs	r2, #5
 800093a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e09f      	b.n	8000a82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f003 0302 	and.w	r3, r3, #2
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1e5      	bne.n	800091c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7e1b      	ldrb	r3, [r3, #24]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d108      	bne.n	800096a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	e007      	b.n	800097a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7e5b      	ldrb	r3, [r3, #25]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d108      	bne.n	8000994 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e007      	b.n	80009a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7e9b      	ldrb	r3, [r3, #26]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d108      	bne.n	80009be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0220 	orr.w	r2, r2, #32
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	e007      	b.n	80009ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 0220 	bic.w	r2, r2, #32
 80009cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7edb      	ldrb	r3, [r3, #27]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d108      	bne.n	80009e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 0210 	bic.w	r2, r2, #16
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e007      	b.n	80009f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0210 	orr.w	r2, r2, #16
 80009f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7f1b      	ldrb	r3, [r3, #28]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d108      	bne.n	8000a12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f042 0208 	orr.w	r2, r2, #8
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	e007      	b.n	8000a22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f022 0208 	bic.w	r2, r2, #8
 8000a20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7f5b      	ldrb	r3, [r3, #29]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d108      	bne.n	8000a3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f042 0204 	orr.w	r2, r2, #4
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e007      	b.n	8000a4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f022 0204 	bic.w	r2, r2, #4
 8000a4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689a      	ldr	r2, [r3, #8]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	431a      	orrs	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	ea42 0103 	orr.w	r1, r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	1e5a      	subs	r2, r3, #1
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b087      	sub	sp, #28
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aa0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000aa2:	7cfb      	ldrb	r3, [r7, #19]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d003      	beq.n	8000ab0 <HAL_CAN_ConfigFilter+0x26>
 8000aa8:	7cfb      	ldrb	r3, [r7, #19]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	f040 80aa 	bne.w	8000c04 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ab6:	f043 0201 	orr.w	r2, r3, #1
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	f003 031f 	and.w	r3, r3, #31
 8000ac8:	2201      	movs	r2, #1
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d123      	bne.n	8000b32 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	401a      	ands	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3248      	adds	r2, #72	; 0x48
 8000b12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b28:	6979      	ldr	r1, [r7, #20]
 8000b2a:	3348      	adds	r3, #72	; 0x48
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	440b      	add	r3, r1
 8000b30:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d122      	bne.n	8000b80 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	431a      	orrs	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3248      	adds	r2, #72	; 0x48
 8000b60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b76:	6979      	ldr	r1, [r7, #20]
 8000b78:	3348      	adds	r3, #72	; 0x48
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	440b      	add	r3, r1
 8000b7e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d109      	bne.n	8000b9c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b9a:	e007      	b.n	8000bac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d109      	bne.n	8000bc8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000bc6:	e007      	b.n	8000bd8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d107      	bne.n	8000bf0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	431a      	orrs	r2, r3
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bf6:	f023 0201 	bic.w	r2, r3, #1
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	e006      	b.n	8000c12 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
  }
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	371c      	adds	r7, #28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b084      	sub	sp, #16
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d12e      	bne.n	8000c90 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2202      	movs	r2, #2
 8000c36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0201 	bic.w	r2, r2, #1
 8000c48:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c4a:	f7ff fe17 	bl	800087c <HAL_GetTick>
 8000c4e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c50:	e012      	b.n	8000c78 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c52:	f7ff fe13 	bl	800087c <HAL_GetTick>
 8000c56:	4602      	mov	r2, r0
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	2b0a      	cmp	r3, #10
 8000c5e:	d90b      	bls.n	8000c78 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2205      	movs	r2, #5
 8000c70:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e012      	b.n	8000c9e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1e5      	bne.n	8000c52 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e006      	b.n	8000c9e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
  }
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b087      	sub	sp, #28
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cbc:	7dfb      	ldrb	r3, [r7, #23]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d003      	beq.n	8000cca <HAL_CAN_GetRxMessage+0x24>
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	f040 80f3 	bne.w	8000eb0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10e      	bne.n	8000cee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d116      	bne.n	8000d0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e0e7      	b.n	8000ebe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d107      	bne.n	8000d0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e0d8      	b.n	8000ebe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	331b      	adds	r3, #27
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	4413      	add	r3, r2
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0204 	and.w	r2, r3, #4
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10c      	bne.n	8000d44 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	331b      	adds	r3, #27
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	4413      	add	r3, r2
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	0d5b      	lsrs	r3, r3, #21
 8000d3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	e00b      	b.n	8000d5c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	331b      	adds	r3, #27
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	4413      	add	r3, r2
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	331b      	adds	r3, #27
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	4413      	add	r3, r2
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0202 	and.w	r2, r3, #2
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	331b      	adds	r3, #27
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3304      	adds	r3, #4
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 020f 	and.w	r2, r3, #15
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	331b      	adds	r3, #27
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	4413      	add	r3, r2
 8000d96:	3304      	adds	r3, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	331b      	adds	r3, #27
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4413      	add	r3, r2
 8000dae:	3304      	adds	r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	0c1b      	lsrs	r3, r3, #16
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	4413      	add	r3, r2
 8000dc4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	4413      	add	r3, r2
 8000dda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	0a1a      	lsrs	r2, r3, #8
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	4413      	add	r3, r2
 8000df4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	0c1a      	lsrs	r2, r3, #16
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	3302      	adds	r3, #2
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	4413      	add	r3, r2
 8000e0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	0e1a      	lsrs	r2, r3, #24
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	3303      	adds	r3, #3
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	4413      	add	r3, r2
 8000e28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	3304      	adds	r3, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	4413      	add	r3, r2
 8000e40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	0a1a      	lsrs	r2, r3, #8
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	3305      	adds	r3, #5
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	011b      	lsls	r3, r3, #4
 8000e58:	4413      	add	r3, r2
 8000e5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	0c1a      	lsrs	r2, r3, #16
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	3306      	adds	r3, #6
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	011b      	lsls	r3, r3, #4
 8000e72:	4413      	add	r3, r2
 8000e74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	0e1a      	lsrs	r2, r3, #24
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	3307      	adds	r3, #7
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d108      	bne.n	8000e9c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f042 0220 	orr.w	r2, r2, #32
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	e007      	b.n	8000eac <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	691a      	ldr	r2, [r3, #16]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0220 	orr.w	r2, r2, #32
 8000eaa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e006      	b.n	8000ebe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
  }
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	371c      	adds	r7, #28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eda:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d002      	beq.n	8000ee8 <HAL_CAN_ActivateNotification+0x1e>
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d109      	bne.n	8000efc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6959      	ldr	r1, [r3, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e006      	b.n	8000f0a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
  }
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b08a      	sub	sp, #40	; 0x28
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d07c      	beq.n	8001056 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d023      	beq.n	8000fae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 f983 	bl	8001284 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f7e:	e016      	b.n	8000fae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d004      	beq.n	8000f94 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
 8000f92:	e00c      	b.n	8000fae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d004      	beq.n	8000fa8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa6:	e002      	b.n	8000fae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f989 	bl	80012c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d024      	beq.n	8001002 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f963 	bl	8001298 <HAL_CAN_TxMailbox1CompleteCallback>
 8000fd2:	e016      	b.n	8001002 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe6:	e00c      	b.n	8001002 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffa:	e002      	b.n	8001002 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f969 	bl	80012d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d024      	beq.n	8001056 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001014:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f943 	bl	80012ac <HAL_CAN_TxMailbox2CompleteCallback>
 8001026:	e016      	b.n	8001056 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
 800103a:	e00c      	b.n	8001056 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
 800104e:	e002      	b.n	8001056 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f949 	bl	80012e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00c      	beq.n	800107a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001070:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2210      	movs	r2, #16
 8001078:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00b      	beq.n	800109c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2208      	movs	r2, #8
 8001094:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f930 	bl	80012fc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d009      	beq.n	80010ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff f94f 	bl	8000358 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00c      	beq.n	80010de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2210      	movs	r2, #16
 80010dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	f003 0320 	and.w	r3, r3, #32
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2208      	movs	r2, #8
 80010f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f912 	bl	8001324 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	2b00      	cmp	r3, #0
 8001108:	d009      	beq.n	800111e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f8f9 	bl	8001310 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00b      	beq.n	8001140 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2210      	movs	r2, #16
 8001138:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f8fc 	bl	8001338 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2208      	movs	r2, #8
 800115a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f8f5 	bl	800134c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d07b      	beq.n	8001264 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	2b00      	cmp	r3, #0
 8001174:	d072      	beq.n	800125c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d043      	beq.n	800125c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d03e      	beq.n	800125c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011e4:	2b60      	cmp	r3, #96	; 0x60
 80011e6:	d02b      	beq.n	8001240 <HAL_CAN_IRQHandler+0x32a>
 80011e8:	2b60      	cmp	r3, #96	; 0x60
 80011ea:	d82e      	bhi.n	800124a <HAL_CAN_IRQHandler+0x334>
 80011ec:	2b50      	cmp	r3, #80	; 0x50
 80011ee:	d022      	beq.n	8001236 <HAL_CAN_IRQHandler+0x320>
 80011f0:	2b50      	cmp	r3, #80	; 0x50
 80011f2:	d82a      	bhi.n	800124a <HAL_CAN_IRQHandler+0x334>
 80011f4:	2b40      	cmp	r3, #64	; 0x40
 80011f6:	d019      	beq.n	800122c <HAL_CAN_IRQHandler+0x316>
 80011f8:	2b40      	cmp	r3, #64	; 0x40
 80011fa:	d826      	bhi.n	800124a <HAL_CAN_IRQHandler+0x334>
 80011fc:	2b30      	cmp	r3, #48	; 0x30
 80011fe:	d010      	beq.n	8001222 <HAL_CAN_IRQHandler+0x30c>
 8001200:	2b30      	cmp	r3, #48	; 0x30
 8001202:	d822      	bhi.n	800124a <HAL_CAN_IRQHandler+0x334>
 8001204:	2b10      	cmp	r3, #16
 8001206:	d002      	beq.n	800120e <HAL_CAN_IRQHandler+0x2f8>
 8001208:	2b20      	cmp	r3, #32
 800120a:	d005      	beq.n	8001218 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800120c:	e01d      	b.n	800124a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001216:	e019      	b.n	800124c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001220:	e014      	b.n	800124c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	f043 0320 	orr.w	r3, r3, #32
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800122a:	e00f      	b.n	800124c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001234:	e00a      	b.n	800124c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800123e:	e005      	b.n	800124c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001248:	e000      	b.n	800124c <HAL_CAN_IRQHandler+0x336>
            break;
 800124a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800125a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2204      	movs	r2, #4
 8001262:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	2b00      	cmp	r3, #0
 8001268:	d008      	beq.n	800127c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f872 	bl	8001360 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <__NVIC_EnableIRQ+0x38>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff8e 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff29 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff3e 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff8e 	bl	8001468 <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5d 	bl	8001414 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff31 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa2 	bl	80014d0 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	e14e      	b.n	8001846 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8140 	beq.w	8001840 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d005      	beq.n	80015d8 <HAL_GPIO_Init+0x40>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d130      	bne.n	800163a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160e:	2201      	movs	r2, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 0201 	and.w	r2, r3, #1
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b03      	cmp	r3, #3
 8001644:	d017      	beq.n	8001676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	6939      	ldr	r1, [r7, #16]
 80016c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0203 	and.w	r2, r3, #3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 809a 	beq.w	8001840 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170c:	4b55      	ldr	r3, [pc, #340]	; (8001864 <HAL_GPIO_Init+0x2cc>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a54      	ldr	r2, [pc, #336]	; (8001864 <HAL_GPIO_Init+0x2cc>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b52      	ldr	r3, [pc, #328]	; (8001864 <HAL_GPIO_Init+0x2cc>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001724:	4a50      	ldr	r2, [pc, #320]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800174e:	d013      	beq.n	8001778 <HAL_GPIO_Init+0x1e0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a46      	ldr	r2, [pc, #280]	; (800186c <HAL_GPIO_Init+0x2d4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d00d      	beq.n	8001774 <HAL_GPIO_Init+0x1dc>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a45      	ldr	r2, [pc, #276]	; (8001870 <HAL_GPIO_Init+0x2d8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0x1d8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a44      	ldr	r2, [pc, #272]	; (8001874 <HAL_GPIO_Init+0x2dc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_GPIO_Init+0x1d4>
 8001768:	2303      	movs	r3, #3
 800176a:	e006      	b.n	800177a <HAL_GPIO_Init+0x1e2>
 800176c:	2305      	movs	r3, #5
 800176e:	e004      	b.n	800177a <HAL_GPIO_Init+0x1e2>
 8001770:	2302      	movs	r3, #2
 8001772:	e002      	b.n	800177a <HAL_GPIO_Init+0x1e2>
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <HAL_GPIO_Init+0x1e2>
 8001778:	2300      	movs	r3, #0
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	f002 0203 	and.w	r2, r2, #3
 8001780:	0092      	lsls	r2, r2, #2
 8001782:	4093      	lsls	r3, r2
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800178a:	4937      	ldr	r1, [pc, #220]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <HAL_GPIO_Init+0x2e0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017bc:	4a2e      	ldr	r2, [pc, #184]	; (8001878 <HAL_GPIO_Init+0x2e0>)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017c2:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <HAL_GPIO_Init+0x2e0>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017e6:	4a24      	ldr	r2, [pc, #144]	; (8001878 <HAL_GPIO_Init+0x2e0>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_GPIO_Init+0x2e0>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001810:	4a19      	ldr	r2, [pc, #100]	; (8001878 <HAL_GPIO_Init+0x2e0>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_GPIO_Init+0x2e0>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800183a:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_GPIO_Init+0x2e0>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	f47f aea9 	bne.w	80015a8 <HAL_GPIO_Init+0x10>
  }
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000
 800186c:	48000400 	.word	0x48000400
 8001870:	48000800 	.word	0x48000800
 8001874:	48000c00 	.word	0x48000c00
 8001878:	40010400 	.word	0x40010400

0800187c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001882:	af00      	add	r7, sp, #0
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	f000 bef4 	b.w	800267e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 816a 	beq.w	8001b7a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018a6:	4bb3      	ldr	r3, [pc, #716]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d00c      	beq.n	80018cc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b2:	4bb0      	ldr	r3, [pc, #704]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d159      	bne.n	8001972 <HAL_RCC_OscConfig+0xf6>
 80018be:	4bad      	ldr	r3, [pc, #692]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ca:	d152      	bne.n	8001972 <HAL_RCC_OscConfig+0xf6>
 80018cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d102      	bne.n	80018fe <HAL_RCC_OscConfig+0x82>
 80018f8:	4b9e      	ldr	r3, [pc, #632]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	e015      	b.n	800192a <HAL_RCC_OscConfig+0xae>
 80018fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001902:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001916:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800191a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001926:	4b93      	ldr	r3, [pc, #588]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800192e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001932:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001936:	fa92 f2a2 	rbit	r2, r2
 800193a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800193e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001942:	fab2 f282 	clz	r2, r2
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	f042 0220 	orr.w	r2, r2, #32
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f002 021f 	and.w	r2, r2, #31
 8001952:	2101      	movs	r1, #1
 8001954:	fa01 f202 	lsl.w	r2, r1, r2
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 810c 	beq.w	8001b78 <HAL_RCC_OscConfig+0x2fc>
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 8106 	bne.w	8001b78 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	f000 be86 	b.w	800267e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197c:	d106      	bne.n	800198c <HAL_RCC_OscConfig+0x110>
 800197e:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a7c      	ldr	r2, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 8001984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e030      	b.n	80019ee <HAL_RCC_OscConfig+0x172>
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x134>
 8001996:	4b77      	ldr	r3, [pc, #476]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a76      	ldr	r2, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 800199c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b74      	ldr	r3, [pc, #464]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a73      	ldr	r2, [pc, #460]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e01e      	b.n	80019ee <HAL_RCC_OscConfig+0x172>
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ba:	d10c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x15a>
 80019bc:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a6c      	ldr	r2, [pc, #432]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a69      	ldr	r2, [pc, #420]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	e00b      	b.n	80019ee <HAL_RCC_OscConfig+0x172>
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a66      	ldr	r2, [pc, #408]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ec:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ee:	4b61      	ldr	r3, [pc, #388]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	f023 020f 	bic.w	r2, r3, #15
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	495d      	ldr	r1, [pc, #372]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d059      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7fe ff36 	bl	800087c <HAL_GetTick>
 8001a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a16:	f7fe ff31 	bl	800087c <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d902      	bls.n	8001a2c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	f000 be29 	b.w	800267e <HAL_RCC_OscConfig+0xe02>
 8001a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a30:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a40:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_OscConfig+0x1e2>
 8001a58:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	e015      	b.n	8001a8a <HAL_RCC_OscConfig+0x20e>
 8001a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a62:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a76:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a7a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a8e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a92:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a96:	fa92 f2a2 	rbit	r2, r2
 8001a9a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a9e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001aa2:	fab2 f282 	clz	r2, r2
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	f042 0220 	orr.w	r2, r2, #32
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f002 021f 	and.w	r2, r2, #31
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ab      	beq.n	8001a16 <HAL_RCC_OscConfig+0x19a>
 8001abe:	e05c      	b.n	8001b7a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7fe fedc 	bl	800087c <HAL_GetTick>
 8001ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aca:	f7fe fed7 	bl	800087c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d902      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	f000 bdcf 	b.w	800267e <HAL_RCC_OscConfig+0xe02>
 8001ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001af4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_OscConfig+0x296>
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	e015      	b.n	8001b3e <HAL_RCC_OscConfig+0x2c2>
 8001b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b16:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b2a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b2e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_RCC_OscConfig+0x2f8>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b42:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b46:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b4a:	fa92 f2a2 	rbit	r2, r2
 8001b4e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b52:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b56:	fab2 f282 	clz	r2, r2
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	f042 0220 	orr.w	r2, r2, #32
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	f002 021f 	and.w	r2, r2, #31
 8001b66:	2101      	movs	r1, #1
 8001b68:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ab      	bne.n	8001aca <HAL_RCC_OscConfig+0x24e>
 8001b72:	e002      	b.n	8001b7a <HAL_RCC_OscConfig+0x2fe>
 8001b74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 816f 	beq.w	8001e68 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b8a:	4bd0      	ldr	r3, [pc, #832]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b96:	4bcd      	ldr	r3, [pc, #820]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d16c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x400>
 8001ba2:	4bca      	ldr	r3, [pc, #808]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d166      	bne.n	8001c7c <HAL_RCC_OscConfig+0x400>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bc0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d102      	bne.n	8001bde <HAL_RCC_OscConfig+0x362>
 8001bd8:	4bbc      	ldr	r3, [pc, #752]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	e013      	b.n	8001c06 <HAL_RCC_OscConfig+0x38a>
 8001bde:	2302      	movs	r3, #2
 8001be0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001bf6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c02:	4bb2      	ldr	r3, [pc, #712]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	2202      	movs	r2, #2
 8001c08:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c0c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c10:	fa92 f2a2 	rbit	r2, r2
 8001c14:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c18:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c1c:	fab2 f282 	clz	r2, r2
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f002 021f 	and.w	r2, r2, #31
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_RCC_OscConfig+0x3cc>
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d002      	beq.n	8001c48 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f000 bd1b 	b.w	800267e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4ba0      	ldr	r3, [pc, #640]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	21f8      	movs	r1, #248	; 0xf8
 8001c58:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c60:	fa91 f1a1 	rbit	r1, r1
 8001c64:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c68:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c6c:	fab1 f181 	clz	r1, r1
 8001c70:	b2c9      	uxtb	r1, r1
 8001c72:	408b      	lsls	r3, r1
 8001c74:	4995      	ldr	r1, [pc, #596]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	e0f5      	b.n	8001e68 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8085 	beq.w	8001d92 <HAL_RCC_OscConfig+0x516>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	461a      	mov	r2, r3
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7fe fde2 	bl	800087c <HAL_GetTick>
 8001cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7fe fddd 	bl	800087c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d902      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f000 bcd5 	b.w	800267e <HAL_RCC_OscConfig+0xe02>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ce6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_OscConfig+0x488>
 8001cfe:	4b73      	ldr	r3, [pc, #460]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e013      	b.n	8001d2c <HAL_RCC_OscConfig+0x4b0>
 8001d04:	2302      	movs	r3, #2
 8001d06:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d28:	4b68      	ldr	r3, [pc, #416]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d32:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d36:	fa92 f2a2 	rbit	r2, r2
 8001d3a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d3e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d42:	fab2 f282 	clz	r2, r2
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f042 0220 	orr.w	r2, r2, #32
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f002 021f 	and.w	r2, r2, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f202 	lsl.w	r2, r1, r2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0af      	beq.n	8001cbe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	4b5b      	ldr	r3, [pc, #364]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	21f8      	movs	r1, #248	; 0xf8
 8001d6e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d76:	fa91 f1a1 	rbit	r1, r1
 8001d7a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d7e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d82:	fab1 f181 	clz	r1, r1
 8001d86:	b2c9      	uxtb	r1, r1
 8001d88:	408b      	lsls	r3, r1
 8001d8a:	4950      	ldr	r1, [pc, #320]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e06a      	b.n	8001e68 <HAL_RCC_OscConfig+0x5ec>
 8001d92:	2301      	movs	r3, #1
 8001d94:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001da4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	461a      	mov	r2, r3
 8001dba:	2300      	movs	r3, #0
 8001dbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fd5d 	bl	800087c <HAL_GetTick>
 8001dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7fe fd58 	bl	800087c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d902      	bls.n	8001dde <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	f000 bc50 	b.w	800267e <HAL_RCC_OscConfig+0xe02>
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d102      	bne.n	8001e0e <HAL_RCC_OscConfig+0x592>
 8001e08:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	e013      	b.n	8001e36 <HAL_RCC_OscConfig+0x5ba>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_RCC_OscConfig+0x650>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	2202      	movs	r2, #2
 8001e38:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e3c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e40:	fa92 f2a2 	rbit	r2, r2
 8001e44:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e48:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e4c:	fab2 f282 	clz	r2, r2
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f042 0220 	orr.w	r2, r2, #32
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	f002 021f 	and.w	r2, r2, #31
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1af      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80da 	beq.w	800202c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d069      	beq.n	8001f56 <HAL_RCC_OscConfig+0x6da>
 8001e82:	2301      	movs	r3, #1
 8001e84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_OscConfig+0x654>)
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7fe fce6 	bl	800087c <HAL_GetTick>
 8001eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb4:	e00e      	b.n	8001ed4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7fe fce1 	bl	800087c <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d906      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e3d9      	b.n	800267e <HAL_RCC_OscConfig+0xe02>
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	10908120 	.word	0x10908120
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ee6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001eea:	2202      	movs	r2, #2
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f02:	2202      	movs	r2, #2
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	4ba5      	ldr	r3, [pc, #660]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 8001f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f1a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f1e:	2102      	movs	r1, #2
 8001f20:	6019      	str	r1, [r3, #0]
 8001f22:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f1a3 	rbit	r1, r3
 8001f2c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f30:	6019      	str	r1, [r3, #0]
  return result;
 8001f32:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0b0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x63a>
 8001f54:	e06a      	b.n	800202c <HAL_RCC_OscConfig+0x7b0>
 8001f56:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f6c:	601a      	str	r2, [r3, #0]
  return result;
 8001f6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f72:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b8c      	ldr	r3, [pc, #560]	; (80021b0 <HAL_RCC_OscConfig+0x934>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	461a      	mov	r2, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f88:	f7fe fc78 	bl	800087c <HAL_GetTick>
 8001f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	e009      	b.n	8001fa6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f92:	f7fe fc73 	bl	800087c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e36b      	b.n	800267e <HAL_RCC_OscConfig+0xe02>
 8001fa6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001faa:	2202      	movs	r2, #2
 8001fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	fa93 f2a3 	rbit	r2, r3
 8001fd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fda:	2202      	movs	r2, #2
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	fa93 f2a3 	rbit	r2, r3
 8001fe8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fee:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 8001ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	6019      	str	r1, [r3, #0]
 8001ffa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f1a3 	rbit	r1, r3
 8002004:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002008:	6019      	str	r1, [r3, #0]
  return result;
 800200a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	2101      	movs	r1, #1
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1b2      	bne.n	8001f92 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8158 	beq.w	80022ec <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002042:	4b5a      	ldr	r3, [pc, #360]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d112      	bne.n	8002074 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b57      	ldr	r3, [pc, #348]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a56      	ldr	r2, [pc, #344]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	61d3      	str	r3, [r2, #28]
 800205a:	4b54      	ldr	r3, [pc, #336]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f107 0308 	add.w	r3, r7, #8
 800206c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800206e:	2301      	movs	r3, #1
 8002070:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <HAL_RCC_OscConfig+0x938>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d11a      	bne.n	80020b6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002080:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_RCC_OscConfig+0x938>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a4b      	ldr	r2, [pc, #300]	; (80021b4 <HAL_RCC_OscConfig+0x938>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208c:	f7fe fbf6 	bl	800087c <HAL_GetTick>
 8002090:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	e009      	b.n	80020aa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7fe fbf1 	bl	800087c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e2e9      	b.n	800267e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <HAL_RCC_OscConfig+0x938>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ef      	beq.n	8002096 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x852>
 80020c0:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a39      	ldr	r2, [pc, #228]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	e02f      	b.n	800212e <HAL_RCC_OscConfig+0x8b2>
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x876>
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a33      	ldr	r2, [pc, #204]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a30      	ldr	r2, [pc, #192]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 80020ea:	f023 0304 	bic.w	r3, r3, #4
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	e01d      	b.n	800212e <HAL_RCC_OscConfig+0x8b2>
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	d10c      	bne.n	8002116 <HAL_RCC_OscConfig+0x89a>
 80020fc:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a2a      	ldr	r2, [pc, #168]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	4b28      	ldr	r3, [pc, #160]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6213      	str	r3, [r2, #32]
 8002114:	e00b      	b.n	800212e <HAL_RCC_OscConfig+0x8b2>
 8002116:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a24      	ldr	r2, [pc, #144]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a21      	ldr	r2, [pc, #132]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d06b      	beq.n	8002210 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002138:	f7fe fba0 	bl	800087c <HAL_GetTick>
 800213c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	e00b      	b.n	800215a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fb9b 	bl	800087c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e291      	b.n	800267e <HAL_RCC_OscConfig+0xe02>
 800215a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800215e:	2202      	movs	r2, #2
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002176:	2202      	movs	r2, #2
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002188:	601a      	str	r2, [r3, #0]
  return result;
 800218a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800218e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d109      	bne.n	80021b8 <HAL_RCC_OscConfig+0x93c>
 80021a4:	4b01      	ldr	r3, [pc, #4]	; (80021ac <HAL_RCC_OscConfig+0x930>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x958>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	10908120 	.word	0x10908120
 80021b4:	40007000 	.word	0x40007000
 80021b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	4bbb      	ldr	r3, [pc, #748]	; (80024c0 <HAL_RCC_OscConfig+0xc44>)
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021d8:	2102      	movs	r1, #2
 80021da:	6011      	str	r1, [r2, #0]
 80021dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	fa92 f1a2 	rbit	r1, r2
 80021e6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80021ea:	6011      	str	r1, [r2, #0]
  return result;
 80021ec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	fab2 f282 	clz	r2, r2
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f002 021f 	and.w	r2, r2, #31
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d099      	beq.n	8002142 <HAL_RCC_OscConfig+0x8c6>
 800220e:	e063      	b.n	80022d8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002210:	f7fe fb34 	bl	800087c <HAL_GetTick>
 8002214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	e00b      	b.n	8002232 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe fb2f 	bl	800087c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e225      	b.n	800267e <HAL_RCC_OscConfig+0xe02>
 8002232:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002236:	2202      	movs	r2, #2
 8002238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800224e:	2202      	movs	r2, #2
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	fa93 f2a3 	rbit	r2, r3
 800225c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002260:	601a      	str	r2, [r3, #0]
  return result;
 8002262:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002266:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f043 0302 	orr.w	r3, r3, #2
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d102      	bne.n	8002282 <HAL_RCC_OscConfig+0xa06>
 800227c:	4b90      	ldr	r3, [pc, #576]	; (80024c0 <HAL_RCC_OscConfig+0xc44>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	e00d      	b.n	800229e <HAL_RCC_OscConfig+0xa22>
 8002282:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002286:	2202      	movs	r2, #2
 8002288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f2a3 	rbit	r2, r3
 8002294:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	4b89      	ldr	r3, [pc, #548]	; (80024c0 <HAL_RCC_OscConfig+0xc44>)
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022a2:	2102      	movs	r1, #2
 80022a4:	6011      	str	r1, [r2, #0]
 80022a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	fa92 f1a2 	rbit	r1, r2
 80022b0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80022b4:	6011      	str	r1, [r2, #0]
  return result;
 80022b6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	fab2 f282 	clz	r2, r2
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	f002 021f 	and.w	r2, r2, #31
 80022cc:	2101      	movs	r1, #1
 80022ce:	fa01 f202 	lsl.w	r2, r1, r2
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1a0      	bne.n	800221a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e0:	4b77      	ldr	r3, [pc, #476]	; (80024c0 <HAL_RCC_OscConfig+0xc44>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	4a76      	ldr	r2, [pc, #472]	; (80024c0 <HAL_RCC_OscConfig+0xc44>)
 80022e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 81c2 	beq.w	800267c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f8:	4b71      	ldr	r3, [pc, #452]	; (80024c0 <HAL_RCC_OscConfig+0xc44>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	f000 819c 	beq.w	800263e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b02      	cmp	r3, #2
 800230e:	f040 8114 	bne.w	800253a <HAL_RCC_OscConfig+0xcbe>
 8002312:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002316:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800231a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fa93 f2a3 	rbit	r2, r3
 8002326:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800232a:	601a      	str	r2, [r3, #0]
  return result;
 800232c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002330:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800233c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	461a      	mov	r2, r3
 8002344:	2300      	movs	r3, #0
 8002346:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fa98 	bl	800087c <HAL_GetTick>
 800234c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002350:	e009      	b.n	8002366 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe fa93 	bl	800087c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e18b      	b.n	800267e <HAL_RCC_OscConfig+0xe02>
 8002366:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800236a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800236e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	fa93 f2a3 	rbit	r2, r3
 800237a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800237e:	601a      	str	r2, [r3, #0]
  return result;
 8002380:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002384:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <HAL_RCC_OscConfig+0xb24>
 800239a:	4b49      	ldr	r3, [pc, #292]	; (80024c0 <HAL_RCC_OscConfig+0xc44>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	e01b      	b.n	80023d8 <HAL_RCC_OscConfig+0xb5c>
 80023a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	fa93 f2a3 	rbit	r2, r3
 80023ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	4b3a      	ldr	r3, [pc, #232]	; (80024c0 <HAL_RCC_OscConfig+0xc44>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023e0:	6011      	str	r1, [r2, #0]
 80023e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	fa92 f1a2 	rbit	r1, r2
 80023ec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80023f0:	6011      	str	r1, [r2, #0]
  return result;
 80023f2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	fab2 f282 	clz	r2, r2
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	f042 0220 	orr.w	r2, r2, #32
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	f002 021f 	and.w	r2, r2, #31
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f202 	lsl.w	r2, r1, r2
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d19e      	bne.n	8002352 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002414:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <HAL_RCC_OscConfig+0xc44>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	430b      	orrs	r3, r1
 800242a:	4925      	ldr	r1, [pc, #148]	; (80024c0 <HAL_RCC_OscConfig+0xc44>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
 8002430:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	fa93 f2a3 	rbit	r2, r3
 8002444:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002448:	601a      	str	r2, [r3, #0]
  return result;
 800244a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800244e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800245a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	461a      	mov	r2, r3
 8002462:	2301      	movs	r3, #1
 8002464:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7fe fa09 	bl	800087c <HAL_GetTick>
 800246a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246e:	e009      	b.n	8002484 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fa04 	bl	800087c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0fc      	b.n	800267e <HAL_RCC_OscConfig+0xe02>
 8002484:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002488:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800249c:	601a      	str	r2, [r3, #0]
  return result;
 800249e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_RCC_OscConfig+0xc48>
 80024b8:	4b01      	ldr	r3, [pc, #4]	; (80024c0 <HAL_RCC_OscConfig+0xc44>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	e01e      	b.n	80024fc <HAL_RCC_OscConfig+0xc80>
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fa93 f2a3 	rbit	r2, r3
 80024d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f2a3 	rbit	r2, r3
 80024f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	4b63      	ldr	r3, [pc, #396]	; (8002688 <HAL_RCC_OscConfig+0xe0c>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002500:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002504:	6011      	str	r1, [r2, #0]
 8002506:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	fa92 f1a2 	rbit	r1, r2
 8002510:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002514:	6011      	str	r1, [r2, #0]
  return result;
 8002516:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	fab2 f282 	clz	r2, r2
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	f042 0220 	orr.w	r2, r2, #32
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	f002 021f 	and.w	r2, r2, #31
 800252c:	2101      	movs	r1, #1
 800252e:	fa01 f202 	lsl.w	r2, r1, r2
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d09b      	beq.n	8002470 <HAL_RCC_OscConfig+0xbf4>
 8002538:	e0a0      	b.n	800267c <HAL_RCC_OscConfig+0xe00>
 800253a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800253e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	fa93 f2a3 	rbit	r2, r3
 800254e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002552:	601a      	str	r2, [r3, #0]
  return result;
 8002554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002558:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002564:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	461a      	mov	r2, r3
 800256c:	2300      	movs	r3, #0
 800256e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe f984 	bl	800087c <HAL_GetTick>
 8002574:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	e009      	b.n	800258e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe f97f 	bl	800087c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e077      	b.n	800267e <HAL_RCC_OscConfig+0xe02>
 800258e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	fa93 f2a3 	rbit	r2, r3
 80025a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a6:	601a      	str	r2, [r3, #0]
  return result;
 80025a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d102      	bne.n	80025c8 <HAL_RCC_OscConfig+0xd4c>
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <HAL_RCC_OscConfig+0xe0c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	e01b      	b.n	8002600 <HAL_RCC_OscConfig+0xd84>
 80025c8:	f107 0320 	add.w	r3, r7, #32
 80025cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f107 0320 	add.w	r3, r7, #32
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	fa93 f2a3 	rbit	r2, r3
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f107 0318 	add.w	r3, r7, #24
 80025e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	f107 0318 	add.w	r3, r7, #24
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	fa93 f2a3 	rbit	r2, r3
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_OscConfig+0xe0c>)
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	f107 0210 	add.w	r2, r7, #16
 8002604:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002608:	6011      	str	r1, [r2, #0]
 800260a:	f107 0210 	add.w	r2, r7, #16
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	fa92 f1a2 	rbit	r1, r2
 8002614:	f107 020c 	add.w	r2, r7, #12
 8002618:	6011      	str	r1, [r2, #0]
  return result;
 800261a:	f107 020c 	add.w	r2, r7, #12
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	fab2 f282 	clz	r2, r2
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f042 0220 	orr.w	r2, r2, #32
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f002 021f 	and.w	r2, r2, #31
 8002630:	2101      	movs	r1, #1
 8002632:	fa01 f202 	lsl.w	r2, r1, r2
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d19e      	bne.n	800257a <HAL_RCC_OscConfig+0xcfe>
 800263c:	e01e      	b.n	800267c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e018      	b.n	800267e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_RCC_OscConfig+0xe0c>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002654:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002658:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	429a      	cmp	r2, r3
 8002664:	d108      	bne.n	8002678 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002666:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800266a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000

0800268c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b09e      	sub	sp, #120	; 0x78
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e162      	b.n	800296a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b90      	ldr	r3, [pc, #576]	; (80028e8 <HAL_RCC_ClockConfig+0x25c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d910      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b8d      	ldr	r3, [pc, #564]	; (80028e8 <HAL_RCC_ClockConfig+0x25c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0207 	bic.w	r2, r3, #7
 80026ba:	498b      	ldr	r1, [pc, #556]	; (80028e8 <HAL_RCC_ClockConfig+0x25c>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_RCC_ClockConfig+0x25c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e14a      	b.n	800296a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e0:	4b82      	ldr	r3, [pc, #520]	; (80028ec <HAL_RCC_ClockConfig+0x260>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	497f      	ldr	r1, [pc, #508]	; (80028ec <HAL_RCC_ClockConfig+0x260>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80dc 	beq.w	80028b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d13c      	bne.n	8002782 <HAL_RCC_ClockConfig+0xf6>
 8002708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d102      	bne.n	8002732 <HAL_RCC_ClockConfig+0xa6>
 800272c:	4b6f      	ldr	r3, [pc, #444]	; (80028ec <HAL_RCC_ClockConfig+0x260>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	e00f      	b.n	8002752 <HAL_RCC_ClockConfig+0xc6>
 8002732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002736:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	667b      	str	r3, [r7, #100]	; 0x64
 8002740:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002744:	663b      	str	r3, [r7, #96]	; 0x60
 8002746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800274e:	4b67      	ldr	r3, [pc, #412]	; (80028ec <HAL_RCC_ClockConfig+0x260>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002756:	65ba      	str	r2, [r7, #88]	; 0x58
 8002758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002760:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002762:	fab2 f282 	clz	r2, r2
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f042 0220 	orr.w	r2, r2, #32
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f002 021f 	and.w	r2, r2, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d17b      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e0f3      	b.n	800296a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d13c      	bne.n	8002804 <HAL_RCC_ClockConfig+0x178>
 800278a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800278e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x128>
 80027ae:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <HAL_RCC_ClockConfig+0x260>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	e00f      	b.n	80027d4 <HAL_RCC_ClockConfig+0x148>
 80027b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	647b      	str	r3, [r7, #68]	; 0x44
 80027c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40
 80027c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d0:	4b46      	ldr	r3, [pc, #280]	; (80028ec <HAL_RCC_ClockConfig+0x260>)
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80027da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027dc:	fa92 f2a2 	rbit	r2, r2
 80027e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027e4:	fab2 f282 	clz	r2, r2
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f042 0220 	orr.w	r2, r2, #32
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	f002 021f 	and.w	r2, r2, #31
 80027f4:	2101      	movs	r1, #1
 80027f6:	fa01 f202 	lsl.w	r2, r1, r2
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d13a      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b2      	b.n	800296a <HAL_RCC_ClockConfig+0x2de>
 8002804:	2302      	movs	r3, #2
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_RCC_ClockConfig+0x1a0>
 8002826:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_RCC_ClockConfig+0x260>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e00d      	b.n	8002848 <HAL_RCC_ClockConfig+0x1bc>
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
 8002838:	2302      	movs	r3, #2
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_RCC_ClockConfig+0x260>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	2202      	movs	r2, #2
 800284a:	61ba      	str	r2, [r7, #24]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	fa92 f2a2 	rbit	r2, r2
 8002852:	617a      	str	r2, [r7, #20]
  return result;
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	fab2 f282 	clz	r2, r2
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	f042 0220 	orr.w	r2, r2, #32
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	f002 021f 	and.w	r2, r2, #31
 8002866:	2101      	movs	r1, #1
 8002868:	fa01 f202 	lsl.w	r2, r1, r2
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e079      	b.n	800296a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_RCC_ClockConfig+0x260>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f023 0203 	bic.w	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	491a      	ldr	r1, [pc, #104]	; (80028ec <HAL_RCC_ClockConfig+0x260>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002888:	f7fd fff8 	bl	800087c <HAL_GetTick>
 800288c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002890:	f7fd fff4 	bl	800087c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	; 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e061      	b.n	800296a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_RCC_ClockConfig+0x260>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 020c 	and.w	r2, r3, #12
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d1eb      	bne.n	8002890 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_ClockConfig+0x25c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d214      	bcs.n	80028f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_RCC_ClockConfig+0x25c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 0207 	bic.w	r2, r3, #7
 80028ce:	4906      	ldr	r1, [pc, #24]	; (80028e8 <HAL_RCC_ClockConfig+0x25c>)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <HAL_RCC_ClockConfig+0x25c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e040      	b.n	800296a <HAL_RCC_ClockConfig+0x2de>
 80028e8:	40022000 	.word	0x40022000
 80028ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_RCC_ClockConfig+0x2e8>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	491a      	ldr	r1, [pc, #104]	; (8002974 <HAL_RCC_ClockConfig+0x2e8>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_RCC_ClockConfig+0x2e8>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4912      	ldr	r1, [pc, #72]	; (8002974 <HAL_RCC_ClockConfig+0x2e8>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800292e:	f000 f829 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002932:	4601      	mov	r1, r0
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <HAL_RCC_ClockConfig+0x2e8>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800293c:	22f0      	movs	r2, #240	; 0xf0
 800293e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	fa92 f2a2 	rbit	r2, r2
 8002946:	60fa      	str	r2, [r7, #12]
  return result;
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	fab2 f282 	clz	r2, r2
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	40d3      	lsrs	r3, r2
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x2ec>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x2f0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <HAL_RCC_ClockConfig+0x2f4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd ff46 	bl	80007f4 <HAL_InitTick>
  
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3778      	adds	r7, #120	; 0x78
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	080031d0 	.word	0x080031d0
 800297c:	20000000 	.word	0x20000000
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	b08b      	sub	sp, #44	; 0x2c
 8002988:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800299e:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x30>
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x36>
 80029b2:	e03c      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029b4:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029b6:	623b      	str	r3, [r7, #32]
      break;
 80029b8:	e03c      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	fa92 f2a2 	rbit	r2, r2
 80029cc:	607a      	str	r2, [r7, #4]
  return result;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	fab2 f282 	clz	r2, r2
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	40d3      	lsrs	r3, r2
 80029d8:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xc8>)
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	220f      	movs	r2, #15
 80029e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	fa92 f2a2 	rbit	r2, r2
 80029f0:	60fa      	str	r2, [r7, #12]
  return result;
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	fab2 f282 	clz	r2, r2
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	40d3      	lsrs	r3, r2
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	e004      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	623b      	str	r3, [r7, #32]
      break;
 8002a2c:	e002      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a30:	623b      	str	r3, [r7, #32]
      break;
 8002a32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a34:	6a3b      	ldr	r3, [r7, #32]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	372c      	adds	r7, #44	; 0x2c
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	007a1200 	.word	0x007a1200
 8002a4c:	080031e8 	.word	0x080031e8
 8002a50:	080031f8 	.word	0x080031f8
 8002a54:	003d0900 	.word	0x003d0900

08002a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000000 	.word	0x20000000

08002a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a76:	f7ff ffef 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a84:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	fa92 f2a2 	rbit	r2, r2
 8002a90:	603a      	str	r2, [r7, #0]
  return result;
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	fab2 f282 	clz	r2, r2
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	40d3      	lsrs	r3, r2
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	080031e0 	.word	0x080031e0

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002aba:	f7ff ffcd 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002abe:	4601      	mov	r1, r0
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ac8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002acc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	fa92 f2a2 	rbit	r2, r2
 8002ad4:	603a      	str	r2, [r7, #0]
  return result;
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	40d3      	lsrs	r3, r2
 8002ae0:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	080031e0 	.word	0x080031e0

08002af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e040      	b.n	8002b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fd fda0 	bl	8000660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	; 0x24
 8002b24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f82c 	bl	8002b94 <UART_SetConfig>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e022      	b.n	8002b8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f956 	bl	8002e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f9dd 	bl	8002f44 <UART_CheckIdleState>
 8002b8a:	4603      	mov	r3, r0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b8a      	ldr	r3, [pc, #552]	; (8002de8 <UART_SetConfig+0x254>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	6979      	ldr	r1, [r7, #20]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a78      	ldr	r2, [pc, #480]	; (8002dec <UART_SetConfig+0x258>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d120      	bne.n	8002c52 <UART_SetConfig+0xbe>
 8002c10:	4b77      	ldr	r3, [pc, #476]	; (8002df0 <UART_SetConfig+0x25c>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d817      	bhi.n	8002c4c <UART_SetConfig+0xb8>
 8002c1c:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <UART_SetConfig+0x90>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c41 	.word	0x08002c41
 8002c2c:	08002c47 	.word	0x08002c47
 8002c30:	08002c3b 	.word	0x08002c3b
 8002c34:	2300      	movs	r3, #0
 8002c36:	77fb      	strb	r3, [r7, #31]
 8002c38:	e01d      	b.n	8002c76 <UART_SetConfig+0xe2>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	77fb      	strb	r3, [r7, #31]
 8002c3e:	e01a      	b.n	8002c76 <UART_SetConfig+0xe2>
 8002c40:	2304      	movs	r3, #4
 8002c42:	77fb      	strb	r3, [r7, #31]
 8002c44:	e017      	b.n	8002c76 <UART_SetConfig+0xe2>
 8002c46:	2308      	movs	r3, #8
 8002c48:	77fb      	strb	r3, [r7, #31]
 8002c4a:	e014      	b.n	8002c76 <UART_SetConfig+0xe2>
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	77fb      	strb	r3, [r7, #31]
 8002c50:	e011      	b.n	8002c76 <UART_SetConfig+0xe2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a67      	ldr	r2, [pc, #412]	; (8002df4 <UART_SetConfig+0x260>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d102      	bne.n	8002c62 <UART_SetConfig+0xce>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e009      	b.n	8002c76 <UART_SetConfig+0xe2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a64      	ldr	r2, [pc, #400]	; (8002df8 <UART_SetConfig+0x264>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d102      	bne.n	8002c72 <UART_SetConfig+0xde>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e001      	b.n	8002c76 <UART_SetConfig+0xe2>
 8002c72:	2310      	movs	r3, #16
 8002c74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7e:	d15b      	bne.n	8002d38 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002c80:	7ffb      	ldrb	r3, [r7, #31]
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d827      	bhi.n	8002cd6 <UART_SetConfig+0x142>
 8002c86:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <UART_SetConfig+0xf8>)
 8002c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8c:	08002cb1 	.word	0x08002cb1
 8002c90:	08002cb9 	.word	0x08002cb9
 8002c94:	08002cc1 	.word	0x08002cc1
 8002c98:	08002cd7 	.word	0x08002cd7
 8002c9c:	08002cc7 	.word	0x08002cc7
 8002ca0:	08002cd7 	.word	0x08002cd7
 8002ca4:	08002cd7 	.word	0x08002cd7
 8002ca8:	08002cd7 	.word	0x08002cd7
 8002cac:	08002ccf 	.word	0x08002ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb0:	f7ff fede 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8002cb4:	61b8      	str	r0, [r7, #24]
        break;
 8002cb6:	e013      	b.n	8002ce0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cb8:	f7ff fefc 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8002cbc:	61b8      	str	r0, [r7, #24]
        break;
 8002cbe:	e00f      	b.n	8002ce0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cc0:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <UART_SetConfig+0x268>)
 8002cc2:	61bb      	str	r3, [r7, #24]
        break;
 8002cc4:	e00c      	b.n	8002ce0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cc6:	f7ff fe5d 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002cca:	61b8      	str	r0, [r7, #24]
        break;
 8002ccc:	e008      	b.n	8002ce0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cd2:	61bb      	str	r3, [r7, #24]
        break;
 8002cd4:	e004      	b.n	8002ce0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	77bb      	strb	r3, [r7, #30]
        break;
 8002cde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d074      	beq.n	8002dd0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	005a      	lsls	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	441a      	add	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	d916      	bls.n	8002d32 <UART_SetConfig+0x19e>
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0a:	d212      	bcs.n	8002d32 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f023 030f 	bic.w	r3, r3, #15
 8002d14:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	89fb      	ldrh	r3, [r7, #14]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	89fa      	ldrh	r2, [r7, #14]
 8002d2e:	60da      	str	r2, [r3, #12]
 8002d30:	e04e      	b.n	8002dd0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	77bb      	strb	r3, [r7, #30]
 8002d36:	e04b      	b.n	8002dd0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d38:	7ffb      	ldrb	r3, [r7, #31]
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d827      	bhi.n	8002d8e <UART_SetConfig+0x1fa>
 8002d3e:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <UART_SetConfig+0x1b0>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d69 	.word	0x08002d69
 8002d48:	08002d71 	.word	0x08002d71
 8002d4c:	08002d79 	.word	0x08002d79
 8002d50:	08002d8f 	.word	0x08002d8f
 8002d54:	08002d7f 	.word	0x08002d7f
 8002d58:	08002d8f 	.word	0x08002d8f
 8002d5c:	08002d8f 	.word	0x08002d8f
 8002d60:	08002d8f 	.word	0x08002d8f
 8002d64:	08002d87 	.word	0x08002d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d68:	f7ff fe82 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8002d6c:	61b8      	str	r0, [r7, #24]
        break;
 8002d6e:	e013      	b.n	8002d98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d70:	f7ff fea0 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8002d74:	61b8      	str	r0, [r7, #24]
        break;
 8002d76:	e00f      	b.n	8002d98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d78:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <UART_SetConfig+0x268>)
 8002d7a:	61bb      	str	r3, [r7, #24]
        break;
 8002d7c:	e00c      	b.n	8002d98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d7e:	f7ff fe01 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002d82:	61b8      	str	r0, [r7, #24]
        break;
 8002d84:	e008      	b.n	8002d98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d8a:	61bb      	str	r3, [r7, #24]
        break;
 8002d8c:	e004      	b.n	8002d98 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	77bb      	strb	r3, [r7, #30]
        break;
 8002d96:	bf00      	nop
    }

    if (pclk != 0U)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d018      	beq.n	8002dd0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	085a      	lsrs	r2, r3, #1
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	441a      	add	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	d908      	bls.n	8002dcc <UART_SetConfig+0x238>
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d204      	bcs.n	8002dcc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	e001      	b.n	8002dd0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ddc:	7fbb      	ldrb	r3, [r7, #30]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	efff69f3 	.word	0xefff69f3
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40004400 	.word	0x40004400
 8002df8:	40004800 	.word	0x40004800
 8002dfc:	007a1200 	.word	0x007a1200

08002e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01a      	beq.n	8002f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002efe:	d10a      	bne.n	8002f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  }
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f54:	f7fd fc92 	bl	800087c <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d10e      	bne.n	8002f86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f82d 	bl	8002fd6 <UART_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e023      	b.n	8002fce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d10e      	bne.n	8002fb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f817 	bl	8002fd6 <UART_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e00d      	b.n	8002fce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b09c      	sub	sp, #112	; 0x70
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe6:	e0a5      	b.n	8003134 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	f000 80a1 	beq.w	8003134 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff2:	f7fd fc43 	bl	800087c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d302      	bcc.n	8003008 <UART_WaitOnFlagUntilTimeout+0x32>
 8003002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003004:	2b00      	cmp	r3, #0
 8003006:	d13e      	bne.n	8003086 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003010:	e853 3f00 	ldrex	r3, [r3]
 8003014:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003018:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800301c:	667b      	str	r3, [r7, #100]	; 0x64
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003026:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003028:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800302c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e6      	bne.n	8003008 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3308      	adds	r3, #8
 8003040:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	663b      	str	r3, [r7, #96]	; 0x60
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3308      	adds	r3, #8
 8003058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800305a:	64ba      	str	r2, [r7, #72]	; 0x48
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e5      	bne.n	800303a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e067      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d04f      	beq.n	8003134 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800309e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a2:	d147      	bne.n	8003134 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
 80030ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e6      	bne.n	80030ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3308      	adds	r3, #8
 80030e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	e853 3f00 	ldrex	r3, [r3]
 80030ee:	613b      	str	r3, [r7, #16]
   return(result);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3308      	adds	r3, #8
 80030fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003100:	623a      	str	r2, [r7, #32]
 8003102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	69f9      	ldr	r1, [r7, #28]
 8003106:	6a3a      	ldr	r2, [r7, #32]
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	61bb      	str	r3, [r7, #24]
   return(result);
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e5      	bne.n	80030e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e010      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4013      	ands	r3, r2
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	429a      	cmp	r2, r3
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	429a      	cmp	r2, r3
 8003150:	f43f af4a 	beq.w	8002fe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3770      	adds	r7, #112	; 0x70
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <__libc_init_array>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	4d0d      	ldr	r5, [pc, #52]	; (8003198 <__libc_init_array+0x38>)
 8003164:	4c0d      	ldr	r4, [pc, #52]	; (800319c <__libc_init_array+0x3c>)
 8003166:	1b64      	subs	r4, r4, r5
 8003168:	10a4      	asrs	r4, r4, #2
 800316a:	2600      	movs	r6, #0
 800316c:	42a6      	cmp	r6, r4
 800316e:	d109      	bne.n	8003184 <__libc_init_array+0x24>
 8003170:	4d0b      	ldr	r5, [pc, #44]	; (80031a0 <__libc_init_array+0x40>)
 8003172:	4c0c      	ldr	r4, [pc, #48]	; (80031a4 <__libc_init_array+0x44>)
 8003174:	f000 f820 	bl	80031b8 <_init>
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	10a4      	asrs	r4, r4, #2
 800317c:	2600      	movs	r6, #0
 800317e:	42a6      	cmp	r6, r4
 8003180:	d105      	bne.n	800318e <__libc_init_array+0x2e>
 8003182:	bd70      	pop	{r4, r5, r6, pc}
 8003184:	f855 3b04 	ldr.w	r3, [r5], #4
 8003188:	4798      	blx	r3
 800318a:	3601      	adds	r6, #1
 800318c:	e7ee      	b.n	800316c <__libc_init_array+0xc>
 800318e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003192:	4798      	blx	r3
 8003194:	3601      	adds	r6, #1
 8003196:	e7f2      	b.n	800317e <__libc_init_array+0x1e>
 8003198:	08003208 	.word	0x08003208
 800319c:	08003208 	.word	0x08003208
 80031a0:	08003208 	.word	0x08003208
 80031a4:	0800320c 	.word	0x0800320c

080031a8 <memset>:
 80031a8:	4402      	add	r2, r0
 80031aa:	4603      	mov	r3, r0
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d100      	bne.n	80031b2 <memset+0xa>
 80031b0:	4770      	bx	lr
 80031b2:	f803 1b01 	strb.w	r1, [r3], #1
 80031b6:	e7f9      	b.n	80031ac <memset+0x4>

080031b8 <_init>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	bf00      	nop
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr

080031c4 <_fini>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	bf00      	nop
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr
